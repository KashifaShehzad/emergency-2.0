{"ast":null,"code":"var _jsxFileName = \"E:\\\\emergency-handling-react-node\\\\front-end\\\\src\\\\pages\\\\admins.js\",\n    _s2 = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport './admins.css';\nimport AdminLogin from '../Component/adminLogin';\nimport AddService from '../Component/addService';\nimport AdminTaskbar from '../Component/adminTaskbar';\nimport Loading from '../Component/Loading';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Admins = () => {\n  _s2();\n\n  var _s = $RefreshSig$();\n\n  const [loggedIn, setLoggedIn] = useState();\n  const [type, setType] = useState();\n  const [loading, setIsLoading] = useState();\n\n  const loginChange = (status, type) => {\n    setIsLoading(true);\n    setType(type);\n    setLoggedIn(status);\n    console.log(\"status: \" + status + type);\n    setIsLoading(false);\n  };\n\n  let token = localStorage.getItem(\"adminToken\");\n\n  const loginCheck = async () => {\n    setIsLoading(true);\n    console.log(\"called\");\n\n    try {\n      const response = await fetch('https://helping-backend.vercel.app/api/adminlogincheck', {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': 'Bearer ' + token\n        }\n      });\n      const responseData = await response.json(); //console.log(responseData)\n\n      if (response.ok) {\n        setLoggedIn(true);\n        setType(responseData.user.user.type);\n      } else {\n        console.log(\"Token Error\");\n      }\n    } catch {\n      console.log(\"Catch\");\n    }\n\n    setIsLoading(false);\n  };\n\n  function App() {\n    _s();\n\n    useEffect(() => {\n      loginCheck();\n    }, []);\n  }\n\n  _s(App, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n  App();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [loading && /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 21\n    }, this), !loading && /*#__PURE__*/_jsxDEV(AdminTaskbar, {\n      loginChange: loginChange,\n      login: loggedIn\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 22\n    }, this), !loading && loggedIn && /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 34\n    }, this), !loading && !loggedIn && /*#__PURE__*/_jsxDEV(AdminLogin, {\n      login: loginChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 34\n    }, this), !loading && loggedIn && type && /*#__PURE__*/_jsxDEV(AddService, {\n      type: type\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 42\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 9\n  }, this);\n};\n\n_s2(Admins, \"+Ft6B16uW5/KeGHeD91l2o86TWY=\");\n\n_c = Admins;\nexport default Admins;\n\nvar _c;\n\n$RefreshReg$(_c, \"Admins\");","map":{"version":3,"sources":["E:/emergency-handling-react-node/front-end/src/pages/admins.js"],"names":["React","useState","useEffect","AdminLogin","AddService","AdminTaskbar","Loading","Admins","loggedIn","setLoggedIn","type","setType","loading","setIsLoading","loginChange","status","console","log","token","localStorage","getItem","loginCheck","response","fetch","method","headers","responseData","json","ok","user","App"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,OAAO,cAAP;AACA,OAAOC,UAAP,MAAuB,yBAAvB;AACA,OAAOC,UAAP,MAAuB,yBAAvB;AACA,OAAOC,YAAP,MAAyB,2BAAzB;AACA,OAAOC,OAAP,MAAoB,sBAApB;;;AAEA,MAAMC,MAAM,GAAG,MAAM;AAAA;;AAAA;;AAEjB,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BR,QAAQ,EAAxC;AACA,QAAM,CAACS,IAAD,EAAOC,OAAP,IAAkBV,QAAQ,EAAhC;AACA,QAAM,CAACW,OAAD,EAAUC,YAAV,IAA0BZ,QAAQ,EAAxC;;AAEA,QAAMa,WAAW,GAAG,CAACC,MAAD,EAASL,IAAT,KAAkB;AAClCG,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACAF,IAAAA,OAAO,CAACD,IAAD,CAAP;AACAD,IAAAA,WAAW,CAACM,MAAD,CAAX;AAEAC,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAWF,MAAX,GAAmBL,IAA/B;AACAG,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACH,GAPD;;AASA,MAAIK,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,YAArB,CAAZ;;AACA,QAAMC,UAAU,GAAG,YAAY;AAC3BR,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACAG,IAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;;AACA,QAAG;AACH,YAAMK,QAAQ,GAAG,MAAMC,KAAK,CAAC,wDAAD,EAA4D;AACpFC,QAAAA,MAAM,EAAE,KAD4E;AAEpFC,QAAAA,OAAO,EAAE;AACL,0BAAgB,kBADX;AAEL,2BAAiB,YAAYP;AAFxB;AAF2E,OAA5D,CAA5B;AAOA,YAAMQ,YAAY,GAAG,MAAMJ,QAAQ,CAACK,IAAT,EAA3B,CARG,CASH;;AACA,UAAGL,QAAQ,CAACM,EAAZ,EAAgB;AACZnB,QAAAA,WAAW,CAAC,IAAD,CAAX;AACAE,QAAAA,OAAO,CAACe,YAAY,CAACG,IAAb,CAAkBA,IAAlB,CAAuBnB,IAAxB,CAAP;AAEH,OAJD,MAKK;AACDM,QAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACH;AACA,KAlBD,CAmBA,MAAM;AACFD,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACH;;AACDJ,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACH,GA1BD;;AA2BA,WAASiB,GAAT,GAAe;AAAA;;AACX5B,IAAAA,SAAS,CAAC,MAAM;AACZmB,MAAAA,UAAU;AACb,KAFQ,EAEN,EAFM,CAAT;AAGH;;AA/CgB,KA2CRS,GA3CQ;;AAgDjBA,EAAAA,GAAG;AAMH,sBACI;AAAA,eAEClB,OAAO,iBAAI,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,YAFZ,EAIC,CAACA,OAAD,iBAAY,QAAC,YAAD;AAAc,MAAA,WAAW,EAAEE,WAA3B;AAAwC,MAAA,KAAK,EAAEN;AAA/C;AAAA;AAAA;AAAA;AAAA,YAJb,EAKC,CAACI,OAAD,IAAYJ,QAAZ,iBAAwB;AAAA;AAAA;AAAA;AAAA,YALzB,EAMC,CAACI,OAAD,IAAY,CAACJ,QAAb,iBAAwB,QAAC,UAAD;AAAY,MAAA,KAAK,EAAEM;AAAnB;AAAA;AAAA;AAAA;AAAA,YANzB,EAOC,CAACF,OAAD,IAAYJ,QAAZ,IAAwBE,IAAxB,iBAAgC,QAAC,UAAD;AAAY,MAAA,IAAI,EAAEA;AAAlB;AAAA;AAAA;AAAA;AAAA,YAPjC;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAaH,CAnED;;IAAMH,M;;KAAAA,M;AAqEN,eAAeA,MAAf","sourcesContent":["import React, {useState, useEffect} from 'react'\r\nimport './admins.css'\r\nimport AdminLogin from '../Component/adminLogin'\r\nimport AddService from '../Component/addService'\r\nimport AdminTaskbar from '../Component/adminTaskbar'\r\nimport Loading from '../Component/Loading'\r\n\r\nconst Admins = () => {\r\n\r\n    const [loggedIn, setLoggedIn] = useState();\r\n    const [type, setType] = useState();\r\n    const [loading, setIsLoading] = useState();\r\n    \r\n    const loginChange = (status, type) => {\r\n        setIsLoading(true)\r\n        setType(type)\r\n        setLoggedIn(status)\r\n        \r\n        console.log(\"status: \"+status+ type)\r\n        setIsLoading(false)\r\n    }\r\n\r\n    let token = localStorage.getItem(\"adminToken\")\r\n    const loginCheck = async () => {\r\n        setIsLoading(true);\r\n        console.log(\"called\");\r\n        try{\r\n        const response = await fetch('https://helping-backend.vercel.app/api/adminlogincheck' , {\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': 'Bearer ' + token\r\n            }\r\n        });\r\n        const responseData = await response.json();\r\n        //console.log(responseData)\r\n        if(response.ok) {\r\n            setLoggedIn(true)\r\n            setType(responseData.user.user.type)\r\n            \r\n        }\r\n        else {\r\n            console.log(\"Token Error\")\r\n        }\r\n        }\r\n        catch {\r\n            console.log(\"Catch\")\r\n        }\r\n        setIsLoading(false)\r\n    };\r\n    function App() {\r\n        useEffect(() => {\r\n            loginCheck()\r\n        }, []);\r\n    } \r\n    App();\r\n\r\n\r\n    \r\n    \r\n\r\n    return (\r\n        <div>\r\n        \r\n        {loading && <Loading/>}\r\n        \r\n        {!loading && <AdminTaskbar loginChange={loginChange} login={loggedIn} />}\r\n        {!loading && loggedIn && <p></p>}\r\n        {!loading && !loggedIn &&<AdminLogin login={loginChange}/>}\r\n        {!loading && loggedIn && type && <AddService type={type}/>}\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Admins"]},"metadata":{},"sourceType":"module"}